//#####################################################################################
//	Файл				Filters.cpp
//	Название:		Цифровые фильтры.
//	Автор:			Бабкин.П.А
//	Вер. | гггг-ммм-дд | Внес изменения | Описание изменений
//	=====|=============|================|==============================================
// 	 1.0 | 2015 апр 21 | Бабкин П.А	 		| Первый релиз
// 	-----|-------------|----------------|----------------------------------------------
//#####################################################################################

#ifndef MEAN_FILTER_H
#define MEAN_FILTER_H

#include "stdint.h"
//#include "math.h"
#include <cmath>


#ifdef __cplusplus
 extern "C" {
#endif 

using namespace std;   
namespace src{	 
	 

//======================================================================================================================== 
// Mean - Фильтр второго порядка
//======================================================================================================================== 
//	Методы:
//	putSample - Положить в фильтр отсчет АЦП и обработать. Аргумент adc_sample - значение АЦП. Выполняется каждый период дискретизации
//	getMean		- Получить значение на выходе фильтра. Аргументу mean присваивается значение. Либо возвращается, если нет аргумена.
//	putTsTf		- Установить период дискретизации (ts) и постоянную времени фильтра (tf). ts и tf задаются в секундах (0.0002 сек и тп)
	
class MeanFilter
{
	public:
		inline	virtual void 	putSample	(uint16_t adc_sample);
		inline					void 	getMean		(float &mean);
		inline					float	getMean		(void);
										void 	putTsTf		(float ts, float tf);
	protected:
		float				_mean_value;			// Усредненное фильтром значение сигнала
		float				_mean_y_1;				// Компонента фильтра MEAN	(в формате фиксированной точки)
		float				_mean_z_1;				// Компонента фильтра MEAN	(в формате фиксированной точки)
		float				_tfm;							// Постоянная времени фильтра MEAN
		float				_ts;							// Период дискретизациии сигнала
};


//======================================================================================================================== 
// RMS Mean - Фильтр второго порядка
// Измеряет значение с постоянкой. Для синусоидального сигнала сделать отдельный класс.
//======================================================================================================================== 
//	Методы:
//	PutSample - Положить в фильтр отсчет АЦП и обработать. Аргумент adc_sample - значение АЦП. Выполняется каждый период дискретизации
//	GetMean		- Получить значение на выходе фильтра. Аргументу mean присваивается значение.
//	PutTsTf		- Установить период дискретизации (ts) и постоянную времени фильтра (tf). ts и tf задаются в секундах (0.0002 сек и тп)

class RmsFilter : public MeanFilter
{
	public:
		virtual inline	void putSample	(uint16_t adc_sample);
};


//======================================================================================================================== 
//	Inline методы
//======================================================================================================================== 
//	Mean - Фильтр второго порядка
//-------------------------------------------------------------------------------------------------------------------
//	PutSample - Положить в фильтр отсчет АЦП и обработать. Аргумент adc_sample - значение АЦП. Выполняется каждый период дискретизации
//-------------------------------------------------------------------------------------------------------------------
inline void MeanFilter::putSample		(uint16_t adc_sample)
{
	_mean_y_1 = _mean_y_1 + ((float)adc_sample - _mean_y_1)*_tfm;
	_mean_z_1 = _mean_z_1 + (_mean_y_1 - _mean_z_1)*_tfm;
	_mean_value = _mean_z_1;
}


//-------------------------------------------------------------------------------------------------------------------
//	GetMean		- Получить значение на выходе фильтра. Аргументу mean присваивается значение.
//-------------------------------------------------------------------------------------------------------------------
inline	void MeanFilter::getMean		(float &mean)
{
	mean = _mean_value;
}


inline	float MeanFilter::getMean		(void)
{
	return _mean_value;
}

//-------------------------------------------------------------------------------------------------------------------
//	Rms - Фильтр второго порядка
//-------------------------------------------------------------------------------------------------------------------
//	PutSample - Положить в фильтр отсчет АЦП и обработать. Аргумент adc_sample - значение АЦП. Выполняется каждый период дискретизации
//-------------------------------------------------------------------------------------------------------------------
inline void RmsFilter::putSample		(uint16_t adc_sample)
{
	_mean_y_1 = _mean_y_1 + ((float)adc_sample * adc_sample - _mean_y_1)*_tfm;
	_mean_z_1 = _mean_z_1 + (_mean_y_1 - _mean_z_1)*_tfm;
	_mean_value = sqrt( _mean_z_1 );
}


}	// namespace src
#ifdef __cplusplus
};
#endif
#endif	//define UART_HPP

